# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# CompressSDE.py
# Created on: 2017-06-30 12:14:06.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: 
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy
import datetime

#get current date
today = datetime.datetime.now().date().isoformat()
 

#set input database connection
dbConnection = #database connection file here

# set the workspace to list tables to index
arcpy.env.workspace = dbConnection
workspace = arcpy.env.workspace

userName = 'DBO'
# First, get all the stand alone tables, feature classes and rasters owned by the current user.
dataList = arcpy.ListTables('*.' + userName + '.*') + arcpy.ListFeatureClasses('*.' + userName + '.*') + arcpy.ListRasters('*.' + userName + '.*')

#open log file
logFile = open(r'E:\GIS\SDE_Nightly_Compress\logs\compressLog {0}.txt'.format(today), 'w')#replace with your log folder path

"""
#list versions and delete anonymous connections
versions = arcpy.da.ListVersions(dbConnection)
for version in versions:
	try:
		if version.name.find('Anonymous') >-1 and version.name.find('DEFAULT') == -1:
			arcpy.DeleteVersion_management(db,version.name)
			logFile.write("Deleted version {0}.\n".format(version.name))
		else:
			pass
	except:
		logFile.write("Unable to delete version {0}.\n".format(version.name))
"""

#disconnect all users to improve compress
try:
	arcpy.DisconnectUser(dbConnection,"ALL")
	logFile.write('{0}\n\n'.format(arcpy.GetMessages()))
except:
	logFile.write("Failed to disconnect users.\n\n")
	messageText = arcpy.GetMessages()
	logFile.write('%s\n\n'%messageText)
	

try:
	#reconcile blocking versions (it seems to help to specify a specific version)
	arcpy.ReconcileVersions_management(dbConnection,"BLOCKING_VERSIONS","dbo.DEFAULT",
	"\"DOMAIN\\USERNAME\".VERSION_NAME","LOCK_ACQUIRED","ABORT_CONFLICTS")
	logFile.write('{0}\n\n'.format(arcpy.GetMessages()))
except:
	logFile.write("Reconcile Failed.\n\n")
	messageText = arcpy.GetMessages()
	logFile.write('%s\n\n'%messageText)
try:
	arcpy.AnalyzeDatasets_management(workspace, "SYSTEM", dataList, "ANALYZE_BASE", "ANALYZE_DELTA", "ANALYZE_ARCHIVE")
	logFile.write('{0}\n\n'.format(arcpy.GetMessages()))
except:
	logFile.write("Pre compress statistics failed.\n\n")
	messageText = arcpy.GetMessages()
	logFile.write('%s\n\n'%messageText)

try:
	#compress sde database
	arcpy.Compress_management(dbConnection)
	logFile.write('{0}\n\n'.format(arcpy.GetMessages()))	 
except:
	logFile.write("Compress Failed.\n\n")
	messageText = arcpy.GetMessages()
	logFile.write('%s\n\n'%messageText)
	
try:
	
	
	# Rebuild indexes and analyze the states and states_lineages system tables
	arcpy.RebuildIndexes_management(workspace, "SYSTEM", dataList, "ALL")
	logFile.write('{0}\n\n'.format(arcpy.GetMessages()))
	arcpy.AnalyzeDatasets_management(workspace, "SYSTEM", dataList, "ANALYZE_BASE", "ANALYZE_DELTA", "ANALYZE_ARCHIVE")
	logFile.write('{0}\n\n'.format(arcpy.GetMessages()))	   
	
except:
	
	#collect messages from last run tool              
	messageText = arcpy.GetMessages()
	
	#open log file and write the messages and failure notice
	
	logFile.write("Index failed.\n")
	logFile.write(messageText)

logFile.close()              
